from array import array
from typing import Any, Generator, Literal, TypedDict, overload

from shapely.topology import Validating

class _ArrayInterface(TypedDict):
    shape: tuple[int, Literal[2, 3]]
    version: Literal[3]
    typestr: Literal["<f8", ">f8"]
    data: Any

from shapely.geometry.base import BaseGeometry

class CoordinateSequence:
    _cseq = ...
    _ndim = ...
    __p__ = ...
    def __init__(self, parent: BaseGeometry) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(
        self,
    ) -> Generator[tuple[float, float] | tuple[float, float, float], None, None]: ...
    @overload
    def __getitem__(
        self, key: int
    ) -> tuple[float, float] | tuple[float, float, float]: ...
    @overload
    def __getitem__(
        self, key: slice
    ) -> list[tuple[float, float]] | list[tuple[float, float, float]]: ...
    def __getitem__(self, key: int | slice): ...
    @property
    def ctypes(self): ...
    def array_interface(self) -> _ArrayInterface: ...
    __array_interface__ = ...
    @property
    def xy(self) -> tuple[array[float], array[float]]: ...

class BoundsOp(Validating):
    def __init__(self, *args) -> None: ...
    def __call__(self, this: BaseGeometry): ...
