"""
This type stub file was generated by pyright.
"""

from shapely.impl import delegated

"""
Support for GEOS prepared geometry operations.
"""

class PreparedGeometry:
    """
    A geometry prepared for efficient comparison to a set of other geometries.

    Example:

      >>> from shapely.geometry import Point, Polygon
      >>> triangle = Polygon(((0.0, 0.0), (1.0, 1.0), (1.0, -1.0)))
      >>> p = prep(triangle)
      >>> p.intersects(Point(0.5, 0.5))
      True
    """

    impl = ...
    def __init__(self, context) -> None: ...
    def __del__(self): ...
    @delegated
    def contains(self, other):  # -> bool:
        """Returns True if the geometry contains the other, else False"""
        ...
    @delegated
    def contains_properly(self, other):  # -> bool:
        """Returns True if the geometry properly contains the other, else False"""
        ...
    @delegated
    def covers(self, other):  # -> bool:
        """Returns True if the geometry covers the other, else False"""
        ...
    @delegated
    def crosses(self, other):  # -> bool:
        """Returns True if the geometries cross, else False"""
        ...
    @delegated
    def disjoint(self, other):  # -> bool:
        """Returns True if geometries are disjoint, else False"""
        ...
    @delegated
    def intersects(self, other):  # -> bool:
        """Returns True if geometries intersect, else False"""
        ...
    @delegated
    def overlaps(self, other):  # -> bool:
        """Returns True if geometries overlap, else False"""
        ...
    @delegated
    def touches(self, other):  # -> bool:
        """Returns True if geometries touch, else False"""
        ...
    @delegated
    def within(self, other):  # -> bool:
        """Returns True if geometry is within the other, else False"""
        ...
    def __reduce__(self): ...

def prep(ob):  # -> PreparedGeometry:
    """Creates and returns a prepared geometric object."""
    ...
