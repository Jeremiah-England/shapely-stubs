from collections.abc import Iterable, Sequence
from typing import Literal, NoReturn, Optional, TypedDict, overload

from shapely.coords import CoordinateSequence
from shapely.geometry.base import BaseGeometry
from shapely.geometry.linestring import LineString, LineStringAdapter
from shapely.geometry.point import Point
from shapely.geometry.proxy import PolygonProxy

__all__ = ["Polygon", "asPolygon", "LinearRing", "asLinearRing"]

_LinearRingInit = LineString | LinearRing | Iterable[Sequence[float] | Point]
_PolygonHolesInit = Sequence[LineString | LinearRing | Sequence[Sequence[float]]]

class _LinearRingGeoJson(TypedDict):
    type: Literal["LinearRing"]
    coordinates: tuple[tuple[float, float, float], ...] | tuple[
        tuple[float, float], ...
    ]

class _PolygonGeoJson(TypedDict):
    type: Literal["Polygon"]
    coordinates: tuple[tuple[tuple[float, float, float], ...], ...] | tuple[
        tuple[tuple[float, float], ...], ...
    ]

class LinearRing(LineString):
    def __init__(self, coordinates: Optional[_LinearRingInit] = ...) -> None: ...
    @property
    def __geo_interface__(self) -> _LinearRingGeoJson: ...
    coords: CoordinateSequence = ...
    def __setstate__(self, state: bytes): ...
    @property
    def is_ccw(self) -> bool: ...
    @property
    def is_simple(self) -> bool: ...

class LinearRingAdapter(LineStringAdapter):
    __p__ = ...
    def __init__(self, context: _LinearRingInit) -> None: ...
    @property
    def __geo_interface__(self) -> _LinearRingGeoJson: ...

    coords: CoordinateSequence = ...

def asLinearRing(context: _LinearRingInit) -> LinearRingAdapter: ...

class InteriorRingSequence:
    _factory = ...
    _geom = ...
    __p__ = ...
    _ndim = ...
    _index = ...
    _length = ...
    __rings__ = ...
    _gtag = ...
    def __init__(self, parent: Polygon) -> None: ...
    def __iter__(self) -> InteriorRingSequence: ...
    def __next__(self) -> LinearRing: ...
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self, key: int) -> LinearRing: ...
    @overload
    def __getitem__(self, key: slice) -> list[LinearRing]: ...
    def __getitem__(self, key: int | slice) -> LinearRing | list[LinearRing]: ...
    def gtag(self) -> int: ...

class Polygon(BaseGeometry):
    _exterior = ...
    _interiors = ...
    _ndim = ...
    def __init__(
        self,
        shell: Optional[Polygon | _LinearRingInit] = ...,
        holes: Optional[_PolygonHolesInit] = ...,
    ) -> None: ...
    @property
    def exterior(self) -> LinearRing: ...
    @property
    def interiors(self) -> list[LinearRing] | InteriorRingSequence: ...
    def __eq__(self, other: BaseGeometry) -> bool: ...
    def __ne__(self, other: BaseGeometry) -> bool: ...

    __hash__: None = ...
    @property
    def __array_interface__(self) -> NoReturn: ...
    @property
    def coords(self):
        NoReturn: ...
    @property
    def __geo_interface__(self) -> _PolygonGeoJson: ...
    def svg(
        self,
        scale_factor: float = ...,
        fill_color: Optional[str] = ...,
        opacity: float = ...,
    ) -> str: ...
    @classmethod
    def from_bounds(
        cls, xmin: float, ymin: float, xmax: float, ymax: float
    ) -> Polygon: ...

class PolygonAdapter(PolygonProxy, Polygon):
    def __init__(
        self, shell: Sequence[Sequence[float]], holes: Optional[_PolygonHolesInit] = ...
    ) -> None: ...

def asPolygon(
    shell: Sequence[Sequence[float]], holes: Optional[_PolygonHolesInit] = ...
) -> PolygonAdapter: ...
def orient(polygon: Polygon, sign: float = ...) -> Polygon: ...
@overload
def geos_linearring_from_py(
    ob: _LinearRingInit, update_geom: int = ..., update_ndim: Literal[2, 3] = ...
) -> None: ...
@overload
def geos_linearring_from_py(
    ob: _LinearRingInit, update_geom: None = ..., update_ndim: Literal[0, 2, 3] = ...
) -> tuple[int, Literal[2, 3]]: ...
def geos_linearring_from_py(
    ob: _LinearRingInit,
    update_geom: Optional[int] = ...,
    update_ndim: Literal[0, 2, 3] = ...,
) -> Optional[tuple[int, Literal[2, 3]]]: ...
def update_linearring_from_py(geom: LinearRing, ob: _LinearRingInit): ...
@overload
def geos_polygon_from_py(
    shell: None, holes: Optional[_PolygonHolesInit] = ...
) -> None: ...
@overload
def geos_polygon_from_py(shell: Polygon, holes: None = ...) -> Polygon: ...
@overload
def geos_polygon_from_py(
    shell: _LinearRingInit, holes: Optional[_PolygonHolesInit] = ...
) -> Polygon: ...
def geos_polygon_from_py(
    shell: Optional[Polygon | _LinearRingInit], holes: Optional[_PolygonHolesInit] = ...
): ...
