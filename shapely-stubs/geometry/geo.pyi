"""
This type stub file was generated by pyright.
"""

"""
Geometry factories based on the geo interface
"""

def box(minx, miny, maxx, maxy, ccw=...):  # -> Polygon:
    """Returns a rectangular polygon with configurable normal vector"""
    ...

def shape(
    context,
):  # -> Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon | LinearRing | GeometryCollection:
    """
    Returns a new, independent geometry with coordinates *copied* from the
    context. Changes to the original context will not be reflected in the
    geometry object.

    Parameters
    ----------
    context :
        a GeoJSON-like dict, which provides a "type" member describing the type
        of the geometry and "coordinates" member providing a list of coordinates,
        or an object which implements __geo_interface__.

    Returns
    -------
    Geometry object

    Example
    -------
    Create a Point from GeoJSON, and then create a copy using __geo_interface__.

    >>> context = {'type': 'Point', 'coordinates': [0, 1]}
    >>> geom = shape(context)
    >>> geom.type == 'Point'
    True
    >>> geom.wkt
    'POINT (0 1)'
    >>> geom2 = shape(geom)
    >>> geom == geom2
    True
    """
    ...

def asShape(
    context,
):  # -> PointAdapter | LineStringAdapter | PolygonAdapter | MultiPointAdapter | MultiLineStringAdapter | MultiPolygonAdapter | GeometryCollection:
    """
    Adapts the context to a geometry interface. The coordinates remain
    stored in the context, and changes to them will be reflected in the
    returned geometry object.

    .. deprecated:: 1.8
       The proxy geometries (adapter classes) created by this function are
       deprecated, and this function will be removed in Shapely 2.0.
       Use the `shape` function instead to convert a GeoJSON-like dict
       to a Shapely geometry.

    Parameters
    ----------
    context :
        a GeoJSON-like dict, which provides a "type" member describing the type
        of the geometry and "coordinates" member providing a list of coordinates,
        or an object which implements __geo_interface__.

    Returns
    -------
    Geometry object

    Notes
    -----
    The Adapter classes returned by this function trade performance for
    reduced storage of coordinate values. In general, the shape() function
    should be used instead.

    Example
    -------
    Create a Point and Polygon from GeoJSON, change the coordinates of the Point's
    context and show that the corresponding geometry is changed, as well.

    >>> point_context = {'type': 'Point', 'coordinates': [0.5, 0.5]}
    >>> poly_context = {'type': 'Polygon', 'coordinates': [[[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]]}
    >>> point, poly = asShape(point_context), asShape(poly_context)
    >>> poly.intersects(point)
    True
    >>> point_context['coordinates'][0] = 1.5
    >>> poly.intersects(point)
    False
    """
    ...

def mapping(ob):
    """
    Returns a GeoJSON-like mapping from a Geometry or any
    object which implements __geo_interface__

    Parameters
    ----------
    ob :
        An object which implements __geo_interface__.

    Returns
    -------
    dict

    Example
    -------
    >>> pt = Point(0, 0)
    >>> mapping(pt)
    {'type': 'Point', 'coordinates': (0.0, 0.0)}
    """
    ...
