from collections.abc import Callable, Sized
from typing import Any, Literal, Optional

from shapely.geometry.base import EMPTY

class CachingGeometryProxy:
    context: Optional[Sized] = ...
    factory: Optional[Callable[[Sized], tuple[int, Literal[2, 3]]]] = ...
    __geom__: int = EMPTY
    _gtag: Optional[int] = ...
    def __init__(self, context: Sized) -> None: ...
    def empty(self, val: int = ...): ...
    def gtag(self) -> int: ...
    def __setattr__(self, name: str, value: Any): ...

class PolygonProxy(CachingGeometryProxy): ...
