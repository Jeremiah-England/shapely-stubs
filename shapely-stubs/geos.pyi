"""
This type stub file was generated by pyright.
"""

import sys
import threading

from .ctypes_declarations import EXCEPTION_HANDLER_FUNCTYPE

"""
Proxies for libgeos, GEOS-specific exceptions, and utilities
"""
LOG = ...

def load_dll(libname, fallbacks=..., mode=...): ...

_lgeos = ...

def exists_conda_env():  # -> bool:
    """Does this module exist in a conda environment?"""
    ...

if sys.platform.startswith("linux"):
    geos_whl_so = ...
    free = ...
else: ...
start_set = ...
end_set = ...
new_func_names = ...

def make_logging_callback(func):  # -> (fmt: Unknown, *fmt_args: Unknown) -> None:
    """Error or notice handler callback producr

    Wraps a logger method, func, as a GEOS callback.
    """
    ...

error_handler = ...
notice_handler = ...
error_h = EXCEPTION_HANDLER_FUNCTYPE(error_handler)
notice_h = EXCEPTION_HANDLER_FUNCTYPE(notice_handler)

class WKTReader:
    _lgeos = ...
    _reader = ...
    def __init__(self, lgeos) -> None:
        """Create WKT Reader"""
        ...
    def __del__(self):  # -> None:
        """Destroy WKT Reader"""
        ...
    def read(self, text):  # -> BaseGeometry:
        """Returns geometry from WKT"""
        ...

class WKTWriter:
    _lgeos = ...
    _writer = ...
    defaults = ...
    _trim = ...
    _rounding_precision = ...
    _old_3d = ...
    @property
    def trim(self):  # -> Any:
        """Trimming of unnecessary decimals (default: True)"""
        ...
    @trim.setter
    def trim(self, value): ...
    @property
    def rounding_precision(self):  # -> Any:
        """Rounding precision when writing the WKT.
        A precision of -1 (default) disables it."""
        ...
    @rounding_precision.setter
    def rounding_precision(self, value): ...
    @property
    def output_dimension(self):
        """Output dimension, either 2 or 3 (default)"""
        ...
    @output_dimension.setter
    def output_dimension(self, value): ...
    @property
    def old_3d(self):  # -> Any:
        """Show older style for 3D WKT, without 'Z' (default: False)"""
        ...
    @old_3d.setter
    def old_3d(self, value): ...
    def __init__(self, lgeos, **settings) -> None:
        """Create WKT Writer

        Note: older formatting before GEOS 3.3.0 can be achieved by setting
        the properties:
            trim = False
            output_dimension = 2
        """
        ...
    def __setattr__(self, name, value):  # -> None:
        """Limit setting attributes"""
        ...
    def __del__(self):  # -> None:
        """Destroy WKT Writer"""
        ...
    def write(self, geom):  # -> str:
        """Returns WKT string for geometry"""
        ...

class WKBReader:
    _lgeos = ...
    _reader = ...
    def __init__(self, lgeos) -> None:
        """Create WKB Reader"""
        ...
    def __del__(self):  # -> None:
        """Destroy WKB Reader"""
        ...
    def read(self, data):  # -> BaseGeometry:
        """Returns geometry from WKB"""
        ...
    def read_hex(self, data):  # -> BaseGeometry:
        """Returns geometry from WKB hex"""
        ...

class WKBWriter:
    _lgeos = ...
    _writer = ...
    _ENDIAN_BIG = ...
    _ENDIAN_LITTLE = ...
    defaults = ...
    @property
    def output_dimension(self):
        """Output dimension, either 2 or 3 (default)"""
        ...
    @output_dimension.setter
    def output_dimension(self, value): ...
    @property
    def big_endian(self):
        """Byte order is big endian, True (default) or False"""
        ...
    @big_endian.setter
    def big_endian(self, value): ...
    @property
    def include_srid(self):  # -> bool:
        """Include SRID, True or False (default)"""
        ...
    @include_srid.setter
    def include_srid(self, value): ...
    def __init__(self, lgeos, **settings) -> None:
        """Create WKB Writer"""
        ...
    def __setattr__(self, name, value):  # -> None:
        """Limit setting attributes"""
        ...
    def __del__(self):  # -> None:
        """Destroy WKB Writer"""
        ...
    def write(self, geom):  # -> bytes:
        """Returns WKB byte string for geometry"""
        ...
    def write_hex(self, geom):  # -> str:
        """Returns WKB hex string for geometry"""
        ...

def errcheck_wkb(result, func, argtuple):  # -> bytes | None:
    """Returns bytes from a C pointer"""
    ...

def errcheck_just_free(result, func, argtuple):  # -> str:
    """Returns string from a C pointer"""
    ...

def errcheck_null_exception(result, func, argtuple):  # -> str:
    """Wraps errcheck_just_free

    Raises TopologicalError if result is NULL.
    """
    ...

def errcheck_predicate(result, func, argtuple):
    """Result is 2 on exception, 1 on True, 0 on False"""
    ...

class LGEOSBase(threading.local):
    """Proxy for GEOS C API

    This is a base class. Do not instantiate.
    """

    methods = ...
    def __init__(self, dll) -> None: ...
    def __del__(self):  # -> None:
        """Cleanup GEOS related processes"""
        ...

class LGEOS330(LGEOSBase):
    """Proxy for GEOS 3.3.0-CAPI-1.7.0"""

    geos_version = ...
    geos_capi_version = ...
    def __init__(self, dll) -> None: ...

class LGEOS340(LGEOS330):
    """Proxy for GEOS 3.4.0-CAPI-1.8.0"""

    geos_version = ...
    geos_capi_version = ...
    def __init__(self, dll) -> None: ...

class LGEOS350(LGEOS340):
    """Proxy for GEOS 3.5.0-CAPI-1.9.0"""

    geos_version = ...
    geos_capi_version = ...
    def __init__(self, dll) -> None: ...

class LGEOS360(LGEOS350):
    """Proxy for GEOS 3.6.0-CAPI-1.10.0"""

    geos_version = ...
    geos_capi_version = ...
    def __init__(self, dll) -> None: ...

class LGEOS380(LGEOS360):
    """Proxy for GEOS 3.8.0-CAPI-1.13.0"""

    geos_version = ...
    geos_capi_version = ...
    def __init__(self, dll) -> None: ...

if geos_version >= (3, 8, 0):
    L = ...
else:
    L = ...
lgeos = ...

def cleanup(proxy): ...
